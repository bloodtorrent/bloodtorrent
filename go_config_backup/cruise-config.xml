<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="60">
  <server artifactsdir="artifacts" serverId="30b9ec75-8789-4c8f-a7b5-b8210804e228">
    <license user="samsung">dE56DLr0QNGmCfVNJ1VXvlPuSgfcafVw4efdQeMmYGaXC/+bsAQFTiEbzGey ff/Y4MNJRC2ZUAQN7EBpLDr27gcYJw843cK5LnAiPXSX60ZqHbPMVx+MGKq1 S1JSY2Qe7x+/GSdSnMvZ+3cf3rcS3QjQZ+r3p3oIfIkUgcAtF8q9n9/BBNCi mTbpV+PEEm91KbE3YAFetjfv1gEC5QEwrzYiCntiLXksrApudRhA4JdVornd Zj046nJC87wWQZ/5Oa8ZAdPTOjT+jA8NG19HgIxYlZ/YvAW5gkmEe898pa8S pUMbd0A0g9RMktoC5Hm5ocFU4v7Oo1mUJstYBYFwag==</license>
  </server>
  <pipelines group="EnhancedProcess">
    <pipeline name="NEW-build-and-unit-test">
      <materials>
        <svn url="svn://192.168.0.100/project/trunk/bloodtorrent" username="goserver" encryptedPassword="BAJC1bYKa1Wkt2VexyDILQ==" materialName="source" />
      </materials>
      <stage name="build-and-unit-test">
        <jobs>
          <job name="build-and-unit-test">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
              </exec>
              <exec command="mvn">
                <arg>package</arg>
                <runif status="passed" />
              </exec>
              <ant buildfile="pipeline-mgmt.xml" target="zip-for-ft">
                <runif status="passed" />
              </ant>
            </tasks>
            <resources>
              <resource>pipeline2</resource>
            </resources>
            <artifacts>
              <artifact src="artifacts-for-ft.zip" dest="artifacts" />
              <artifact src="pipeline-mgmt.xml" dest="artifacts" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="NEW-functional-test">
      <materials>
        <pipeline pipelineName="NEW-build-and-unit-test" stageName="build-and-unit-test" />
      </materials>
      <stage name="functional-test">
        <jobs>
          <job name="functional-test">
            <environmentvariables>
              <variable name="DISPLAY">
                <value>127.0.0.1:0.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="NEW-build-and-unit-test" stage="build-and-unit-test" job="build-and-unit-test" srcfile="artifacts/artifacts-for-ft.zip">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="NEW-build-and-unit-test" stage="build-and-unit-test" job="build-and-unit-test" srcfile="artifacts/pipeline-mgmt.xml">
                <runif status="passed" />
              </fetchartifact>
              <ant buildfile="pipeline-mgmt.xml" target="unzip-for-ft" />
              <exec command="sh">
                <arg>scripts/stopDropwizard.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn">
                <arg>antrun:run</arg>
                <runif status="passed" />
              </exec>
              <ant workingdir="FunctionalTests" />
              <ant buildfile="pipeline-mgmt.xml" target="zip-for-deploy" />
            </tasks>
            <tabs>
              <tab name="TwistReports" path="twist-reports/html/index.html" />
            </tabs>
            <resources>
              <resource>pipeline2</resource>
            </resources>
            <artifacts>
              <artifact src="artifacts-for-deploy.zip" dest="artifacts" />
              <artifact src="pipeline-mgmt.xml" dest="artifacts" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="NEW-deploy" isLocked="true">
      <materials>
        <pipeline pipelineName="NEW-functional-test" stageName="functional-test" />
      </materials>
      <stage name="deploy">
        <jobs>
          <job name="deploy">
            <tasks>
              <fetchartifact pipeline="NEW-functional-test" stage="functional-test" job="functional-test" srcfile="artifacts/artifacts-for-deploy.zip">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="NEW-functional-test" stage="functional-test" job="functional-test" srcfile="artifacts/pipeline-mgmt.xml">
                <runif status="passed" />
              </fetchartifact>
              <ant buildfile="pipeline-mgmt.xml" target="unzip-for-deploy" />
              <ant buildfile="pipeline-mgmt.xml" target="copy-files">
                <runif status="passed" />
              </ant>
            </tasks>
            <resources>
              <resource>pipeline2</resource>
            </resources>
            <artifacts>
              <artifact src="pipeline-mgmt.xml" dest="artifacts" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="restart">
        <jobs>
          <job name="restart">
            <tasks>
              <fetchartifact pipeline="NEW-deploy" stage="deploy" job="deploy" srcfile="artifacts/pipeline-mgmt.xml">
                <runif status="passed" />
              </fetchartifact>
              <ant buildfile="pipeline-mgmt.xml" target="remote-start" />
            </tasks>
            <resources>
              <resource>pipeline2</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="NEW-BackupGoConfig" isLocked="false">
      <timer>0 0 9,12,15,19 ? * MON-FRI</timer>
      <materials>
        <svn url="svn://192.168.0.100/project/trunk/bloodtorrent/go_config_backup" username="john" encryptedPassword="amMBgMitHjA=" />
      </materials>
      <stage name="performBackup">
        <approval type="manual" />
        <jobs>
          <job name="configBackup">
            <tasks>
              <exec command="cp">
                <arg>/etc/go/cruise-config.xml</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="svn">
                <arg>commit</arg>
                <arg>cruise-config.xml</arg>
                <arg>-m</arg>
                <arg>"[GO-SERVER] checking-in config backup."</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>configBackup</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="code-coverage">
    <pipeline name="sonar" isLocked="false">
      <timer>0 0 7,11,14,17 ? * MON-FRI</timer>
      <materials>
        <svn url="svn://192.168.0.100/project/trunk/bloodtorrent" username="scott" encryptedPassword="u2mZqU3bLug=" />
      </materials>
      <stage name="sonar">
        <approval type="manual" />
        <jobs>
          <job name="sonar">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn">
                <arg>org.codehaus.sonar:sonar-maven3-plugin:3.4.1:sonar</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Sonar" path="sonar/sonar.html" />
            </tabs>
            <resources>
              <resource>Sonar</resource>
            </resources>
            <artifacts>
              <artifact src="sonar.html" dest="sonar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Development">
    <pipeline name="bloodtorrent" isLocked="true">
      <mingle baseUrl="https://minglehosting.thoughtworks.com/samsung/" projectIdentifier="blood_torrent">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="JAVA_HOME">
          <value>/usr/local/java</value>
        </variable>
        <variable name="GRADLE_HOME">
          <value>/home/samsungsds/gradle-1.4</value>
        </variable>
      </environmentvariables>
      <materials>
        <svn url="svn://192.168.0.100/project/trunk/bloodtorrent" username="john" encryptedPassword="amMBgMitHjA=">
          <filter>
            <ignore pattern="FunctionalTests/**/*" />
          </filter>
        </svn>
      </materials>
      <stage name="build">
        <jobs>
          <job name="build_and_unit_test">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>package</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>pipeline1</resource>
            </resources>
            <artifacts>
              <artifact src="target/classes" dest="target" />
              <artifact src="db/bloodtorrent.h2.db" dest="db" />
              <artifact src="target/bloodtorrent-1.0.0-SNAPSHOT.jar" dest="target" />
              <artifact src="ant-deploy.xml" dest="target" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="FunctionalTests" isLocked="true">
      <materials>
        <svn url="svn://192.168.0.100/project/trunk/bloodtorrent" username="kris" encryptedPassword="QGt/MVlJjLU=">
          <filter>
            <ignore pattern="src/**/*" />
          </filter>
        </svn>
        <pipeline pipelineName="bloodtorrent" stageName="build" materialName="bloodtorrent" />
      </materials>
      <stage name="StartBuild">
        <jobs>
          <job name="start">
            <tasks>
              <fetchartifact pipeline="bloodtorrent" stage="build" job="build_and_unit_test" srcfile="db/bloodtorrent.h2.db" dest="db">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="bloodtorrent" stage="build" job="build_and_unit_test" srcfile="target/ant-deploy.xml" dest="target">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="bloodtorrent" stage="build" job="build_and_unit_test" srcfile="target/bloodtorrent-1.0.0-SNAPSHOT.jar" dest="target">
                <runif status="passed" />
              </fetchartifact>
              <exec command="scripts/stopDropwizard.sh">
                <runif status="passed" />
              </exec>
              <exec command="mvn">
                <arg>antrun:run</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>FT</resource>
              <resource>pipeline1</resource>
            </resources>
            <artifacts>
              <artifact src="target/bloodtorrent-1.0.0-SNAPSHOT.jar" dest="target" />
              <artifact src="target/ant-deploy.xml" dest="target" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Execute_Scenarios">
        <jobs>
          <job name="execute">
            <environmentvariables>
              <variable name="DISPLAY">
                <value>127.0.0.1:0.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <ant buildfile="build.xml" target="execute-scenarios" workingdir="./FunctionalTests">
                <runif status="passed" />
              </ant>
            </tasks>
            <tabs>
              <tab name="TwistReports" path="twist-reports/html/index.html" />
            </tabs>
            <resources>
              <resource>FT</resource>
              <resource>pipeline1</resource>
            </resources>
            <artifacts>
              <artifact src="FunctionalTests\twist-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Deployment">
    <pipeline name="deployment">
      <materials>
        <pipeline pipelineName="FunctionalTests" stageName="Execute_Scenarios" />
        <svn url="svn://192.168.0.100/project/trunk/bloodtorrent" username="scott" encryptedPassword="u2mZqU3bLug=" materialName="source" />
      </materials>
      <stage name="AWS-deploy-restart">
        <approval type="manual" />
        <jobs>
          <job name="deploy-restart">
            <tasks>
              <fetchartifact pipeline="FunctionalTests" stage="StartBuild" job="start" srcfile="target/bloodtorrent-1.0.0-SNAPSHOT.jar" dest="target">
                <runif status="passed" />
              </fetchartifact>
              <ant buildfile="ant-deploy.xml">
                <runif status="passed" />
              </ant>
            </tasks>
            <resources>
              <resource>Deploy</resource>
              <resource>pipeline1</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <environments>
    <environment name="Deployment" />
  </environments>
  <agents>
    <agent hostname="bloodtorrent-ci" ipaddress="192.168.0.100" uuid="a7582b55-a275-41e6-9dcc-b3b2b53384d3">
      <resources>
        <resource>Deploy</resource>
        <resource>Sonar</resource>
        <resource>pipeline1</resource>
        <resource>FT</resource>
        <resource>configBackup</resource>
      </resources>
    </agent>
    <agent hostname="build-slave-1" ipaddress="192.168.0.35" uuid="11954bc5-4dac-486b-b5cf-1e08707359f0">
      <resources>
        <resource>pipeline2</resource>
      </resources>
    </agent>
  </agents>
</cruise>

